{"version":3,"file":"index.js","sources":["../../electron/main/action/index.ts","../../electron/main/index.ts"],"sourcesContent":["import { app, shell, dialog, ipcMain } from 'electron'\nexport interface Sig {\n  region: string\n  endpointImage: string\n  securityToken: string\n  bucket: string\n  expiredTime: string\n  accessKeyId: string\n  regionImage: string\n  endpoint: string\n  accessKeySecret: string\n}\n\nimport OSS from 'ali-oss'\nimport fs from 'fs'\n\nexport const OPEN_LINK = 'OPEN_LINK'\nexport const GET_DOWNLOADS_PATH = 'GET_DOWNLOADS_PATH'\nexport const OPEN_FILE_DIALOG = 'OPEN_FILE_DIALOG'\n\nconst openExtraLink = async (link = '') => {\n  await shell.openExternal(link)\n}\n\nconst getDownloadsPath = () => app.getPath('downloads')\n\nconst openFileDialog = async (oldPath: string = app.getPath('downloads')) => {\n  const { filePaths } = await dialog.showOpenDialog({\n    title: '选择下载位置',\n    properties: ['openDirectory', 'createDirectory'],\n    defaultPath: oldPath\n  })\n  return filePaths\n}\n\nconst listenerEvent = () => {\n  ipcMain.handle(OPEN_LINK, async (event, link: string) => openExtraLink(link))\n  ipcMain.handle(GET_DOWNLOADS_PATH, () => getDownloadsPath())\n\n  ipcMain.handle(OPEN_FILE_DIALOG, async (event, ...args: any[]) => openFileDialog(...args))\n\n  ipcMain.handle('OSS_INIT', (event, ...args: any[]) => ossInit(...args))\n  ipcMain.handle('GET_STRAME', async (event, ...args: any[]) => getStream(...args))\n}\n\nlet store: OSS | null = null\n\nconst getStream = async (...args: any[]) => {\n  const url = args[0]\n  const path = args[1]\n  const fileNmae = args[2]\n  if (!store) {\n    return\n  }\n  const result = await store.getStream(url)\n  await fs.promises.mkdir(path, { recursive: true })\n  return new Promise<void>((resolve, reject) => {\n    try {\n      const writeStream = fs.createWriteStream(`${path}/${fileNmae}`)\n      result.stream.pipe(writeStream)\n      writeStream.on('finish', () => {\n        console.log(fileNmae)\n        resolve()\n      })\n      writeStream.on('error', (err) => {\n        console.error('ababab', err)\n        reject(err)\n      })\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n\nconst ossInit = (...args: any[]) => {\n  const token = JSON.parse(args[0])\n  store = new OSS({\n    region: token.region,\n    accessKeyId: token.accessKeyId,\n    accessKeySecret: token.accessKeySecret,\n    bucket: token.bucket,\n    stsToken: token.securityToken\n  })\n}\n\nexport const registerDownloadService = (): void => {\n  listenerEvent()\n}\n","import { app, BrowserWindow, shell, ipcMain } from 'electron'\nimport { release } from 'node:os'\nimport { join } from 'node:path'\nimport { registerDownloadService } from './action'\n\n// The built directory structure\n//\n// ├─┬ dist-electron\n// │ ├─┬ main\n// │ │ └── index.js    > Electron-Main\n// │ └─┬ preload\n// │   └── index.js    > Preload-Scripts\n// ├─┬ dist\n// │ └── index.html    > Electron-Renderer\n//\nprocess.env.DIST_ELECTRON = join(__dirname, '..')\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nlet win: BrowserWindow | null = null\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.js')\nconst url = process.env.VITE_DEV_SERVER_URL as string\nconst indexHtml = join(process.env.DIST, 'index.html')\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Main window',\n    icon: join(process.env.PUBLIC as string, 'favicon.ico'),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: true,\n      contextIsolation: false,\n      webSecurity: false\n    },\n  })\n\n  registerDownloadService()\n\n  if (process.env.VITE_DEV_SERVER_URL) { // electron-vite-vue#298\n    win.loadURL(url)\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools()\n  } else {\n    win.loadFile(indexHtml)\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\n  })\n\n  // Make all links open with the browser, not with the application\n  win.webContents.on('will-navigate', (event, url) => {\n    event.preventDefault()\n    shell.openExternal(url)\n  })\n}\n\napp.whenReady().then(createWindow)\n\napp.on('window-all-closed', () => {\n  win = null\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\n\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length) {\n    allWindows[0].focus()\n  } else {\n    createWindow()\n  }\n})\n\n// New window example arg: new windows url\nipcMain.handle('open-win', (_, arg) => {\n  const childWindow = new BrowserWindow({\n    webPreferences: {\n      preload,\n      nodeIntegration: true,\n      contextIsolation: false,\n    },\n  })\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    childWindow.loadURL(`${url}#${arg}`)\n  } else {\n    childWindow.loadFile(indexHtml, { hash: arg })\n  }\n})\n"],"names":["shell","app","dialog","ipcMain","url","join","release","BrowserWindow"],"mappings":"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"}